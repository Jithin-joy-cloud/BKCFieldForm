// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/buildingComponentsThree.dart';
import 'models/buildingComponentsTwo.dart';
import 'models/buildingComponetsOne.dart';
import 'models/completeForm.dart';
import 'models/general_details.dart';
import 'models/house_details.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 3807398718148296080),
      name: 'General',
      lastPropertyId: const IdUid(16, 4104036221518320535),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3344072688570301952),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 865087611522670260),
            name: 'enrolmentId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 914386864334193902),
            name: 'alt_file_id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8285711436919607540),
            name: 'chba_nz_file',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5150740644574945622),
            name: 'perspective',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4209416012945860763),
            name: 'soName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8175945909715816387),
            name: 'hddZone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8872127144315920710),
            name: 'builderName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3856290226211452748),
            name: 'builderId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6916379316972005866),
            name: 'evaluatorName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6832865491024825330),
            name: 'evaluatorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3577682673845981993),
            name: 'fieldTechnician',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 845162187766328869),
            name: 'inspectionDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6277694293109681290),
            name: 'siteContactName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5847697350062759428),
            name: 'siteContactNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4104036221518320535),
            name: 'siteContactEmail',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5394484586533090508),
      name: 'CompleteForm',
      lastPropertyId: const IdUid(6, 272278800889923240),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5197842523288160823),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1387929157484052601),
            name: 'generalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 596125575250863436),
            relationTarget: 'General'),
        ModelProperty(
            id: const IdUid(3, 6184101254250113705),
            name: 'houseId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 8576223212150655855),
            relationTarget: 'House'),
        ModelProperty(
            id: const IdUid(4, 8377571720843313496),
            name: 'buildComponentOneId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 666928459910998766),
            relationTarget: 'BuildComponentOne'),
        ModelProperty(
            id: const IdUid(5, 4657396514698062175),
            name: 'buildComponentTwoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 5595193794844926027),
            relationTarget: 'BuildComponentTwo'),
        ModelProperty(
            id: const IdUid(6, 272278800889923240),
            name: 'buildComponentThreeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 366050052143621015),
            relationTarget: 'BuildComponentThree')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 8880011232009666699),
      name: 'BuildComponentOne',
      lastPropertyId: const IdUid(27, 9138773033114050398),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 790902431672017091),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(8, 4946164887884095580),
            name: 'comments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1343422748827254436),
            name: 'wagBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5561782126619015626),
            name: 'wagBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3700217283006684162),
            name: 'wagVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1111812657198512464),
            name: 'cfrBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3854329139943693549),
            name: 'cfrBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3647125088632933540),
            name: 'cfrVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3454823965580554124),
            name: 'cbaBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5119032714214600279),
            name: 'cbaBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4857364227946486559),
            name: 'cbaVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2646759082857891769),
            name: 'efBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 526952850622648061),
            name: 'efBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9096985182397044145),
            name: 'efVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5439908901119816707),
            name: 'fwBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1526494492873004726),
            name: 'fwBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7286580123439160615),
            name: 'fwVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2724207059528165447),
            name: 'fwImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 271978487151057095),
            name: 'uhbBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 2330389649873887310),
            name: 'uhbBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 9138773033114050398),
            name: 'uhbVerification',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7504600936616305210),
      name: 'BuildComponentThree',
      lastPropertyId: const IdUid(52, 6634481593084133300),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4582868465377230279),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(9, 9177322959352993399),
            name: 'comments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 400562122262433980),
            name: 'airTightnessBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3322760757160222903),
            name: 'airTightnessVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3840899538329946039),
            name: 'airTightnessCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1440326899608422862),
            name: 'airTightnessACH',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 9151269099954943233),
            name: 'airTightnessNLR',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5743123540441165387),
            name: 'airTightnessEQLA',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5134445678400600836),
            name: 'drainWaterBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2515422501701687001),
            name: 'drainWaterVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3736359624100318400),
            name: 'drainWaterCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4287681701449211421),
            name: 'drainWaterMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5522548888081050376),
            name: 'drainWaterModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 251563464187386687),
            name: 'drainWaterImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1003106439717704877),
            name: 'spaceCoolingBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8782733166927101165),
            name: 'spaceCoolingVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6674630034011627110),
            name: 'spaceCoolingCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 665727339158521243),
            name: 'spaceCoolingMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 4578956357070925806),
            name: 'spaceCoolingModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 4930537872222806320),
            name: 'spaceCoolingImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 884783267450303594),
            name: 'spaceHeatingBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 673655369781596802),
            name: 'spaceHeatingVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6065772492230640204),
            name: 'spaceHeatingCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2584524619628437629),
            name: 'spaceHeatingMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 5567788757476810200),
            name: 'spaceHeatingModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 4565294820165349948),
            name: 'spaceHeatingImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 7787288376835739382),
            name: 'ductSealingRequired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 8986669449920246771),
            name: 'ductSealingVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 5558604823964039684),
            name: 'domesticHotWaterBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 5672069881532606822),
            name: 'domesticHotWaterVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 3056453986611986870),
            name: 'domesticHotWaterCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 5972454143668919521),
            name: 'domesticHotWaterMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 7466468680475897298),
            name: 'domesticHotWaterModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 6558492320912637021),
            name: 'domesticHotWaterImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 6110560991129280594),
            name: 'ventilationBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 2984890242590104062),
            name: 'ventilationVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 1653373700260130538),
            name: 'ventilationCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 2657257830950856021),
            name: 'ventilationMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 2734355635720238934),
            name: 'ventilationModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 4702865005081161800),
            name: 'ventilationImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 859804300802836434),
            name: 'ventilationFresh',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 2897960064013419478),
            name: 'ventilationStale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 530757310738841262),
            name: 'bedroomCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 3864099889643907125),
            name: 'furnaceFan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 6634481593084133300),
            name: 'hrvBalanced',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 1865188869932363416),
      name: 'BuildComponentTwo',
      lastPropertyId: const IdUid(34, 3638236346355294633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 520270944040037067),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(10, 6917735293924380673),
            name: 'comments',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7817889916655248971),
            name: 'insulatedDoorRequired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7614875201651748477),
            name: 'insulatedDoorVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3144326376945565571),
            name: 'cellarDoorRequired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4098346419318629564),
            name: 'cellarDoorVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6680628068427284249),
            name: 'fireplaceBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5645182721153550736),
            name: 'fireplaceVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 606353106536483180),
            name: 'fireplaceCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4304604605633721644),
            name: 'fireplaceMake',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 9085683196688831527),
            name: 'fireplaceModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1501775156189481234),
            name: 'fireplaceImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 7304129638703796798),
            name: 'triplesBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 9012389549076185291),
            name: 'triplesVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 2675059581270285505),
            name: 'esBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 1568558627782941922),
            name: 'esBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 7137751790807048824),
            name: 'esVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 1762456890167320275),
            name: 'energyMonitorRequired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 1652089210498267004),
            name: 'energyMonitorVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 4604464814029130120),
            name: 'solarPVRequired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 8312390943470148204),
            name: 'solarPVVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 2418900043152423266),
            name: 'windowBOPDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 3552002696756347880),
            name: 'windowBOPCredit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 2618381112478655037),
            name: 'windowVerification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 1003292234564889068),
            name: 'windowImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 3638236346355294633),
            name: 'windowMake',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 4543180280637822342),
      name: 'House',
      lastPropertyId: const IdUid(16, 5152640210326586953),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2002053800997440005),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9037515124892944470),
            name: 'site',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 159825077636828969),
            name: 'phase',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5198272741565173114),
            name: 'lot',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 384323482968241257),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1632084338309494398),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1069426941690844619),
            name: 'postalCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6977208869864146223),
            name: 'province',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 426225452545118800),
            name: 'att_det_murb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3121560185865044238),
            name: 'mid_end_',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5746938139071793305),
            name: 'direction',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2719173955530254843),
            name: 'specialCondition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4848836146542371099),
            name: 'modelName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6459862771782024920),
            name: 'volume',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 9118328913829119840),
            name: 'surfaceArea',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5152640210326586953),
            name: 'comments',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(29, 7891870338850633344),
      lastIndexId: const IdUid(27, 2283066874719364175),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        316236492989479690,
        3814553281266663070,
        6501277129804195120,
        7561693298651673494,
        9061712724768995507,
        8856956850547159490,
        2566037335603841410,
        5458675495902794632,
        3235724344753747117,
        1280953566422611470,
        1200658929856489962,
        9065555232550683402,
        4822993629455077306,
        1409155035272596368,
        228590270831059451,
        241965645110984063,
        8476914899959214581,
        4751659491228014206,
        5234362848001271356,
        5474882596616985561,
        4879008604289581178,
        3640257678388780860,
        7891870338850633344
      ],
      retiredIndexUids: const [
        8419932737001306982,
        2264967328824893213,
        3710802116574037744,
        6581205153156826958,
        6220290045721001403,
        4389215918617200590,
        6355181767856604610,
        4349750103698626262,
        1428064321545944300,
        3626629514894850480,
        1408492470037501095,
        3938164402216885917,
        4935294141141326105,
        3188889487176189731,
        2665082133093012111,
        4836798755554158795,
        4717748684084216158,
        933327731979500740,
        1954624712684834788,
        5359013010207786277,
        2283066874719364175
      ],
      retiredPropertyUids: const [
        34784095747553073,
        4296480678333173306,
        6584841146742262473,
        5011936460637607321,
        8814579608694614425,
        4022917971711978502,
        4008040031455550995,
        4862148664190778270,
        4505466191918462864,
        5534716027018693124,
        215399501089564841,
        4369713447680994042,
        581335126176209432,
        7520667460550212058,
        1955295984489160693,
        4818178833056822030,
        3828447830772541826,
        142617514510646670,
        49574749375412947,
        7540154647855486101,
        4828220470566777941,
        1138927276286547865,
        4895347782041640003,
        8190081808595148904,
        6964629566385076294,
        8693340484547139606,
        5194961995036251908,
        1774009158157818393,
        7890120869150481388,
        7478455584771874511,
        2313944927678664596,
        2750960258953377598,
        8941780916011677522,
        6129766663983403724,
        7964965105553338729,
        3067086897902818798,
        9054663755939990298,
        6901503248164598307,
        2875529494505986660,
        5546511236045940783,
        244196876465511016,
        9064970399692583704,
        989543004385065108,
        4420975483481756405,
        1825607002381650472,
        468109758959865434,
        24689330060162275,
        6171334013152992281,
        1219336029141209099,
        6395397389348394270,
        4057879637709274041,
        8165867987559806398,
        521855720980990559,
        7170616107485262000,
        7545612921578445529,
        4824782720874787694,
        7815646514912643660,
        1899906131385085357,
        5716430341278476116,
        5606424027215806280,
        6940234217611379109,
        8835833540594335441,
        1054228225223668627,
        4865063462595011092,
        8484947001219320004,
        355977660153573705,
        6593576083108892582,
        8526938137624949528,
        1230081931595402518,
        7112993270708805454,
        7225291409098129808,
        7254117774050191444,
        2935874127101708794,
        6458009544892321818,
        442349706037406957,
        6045376594188936594,
        5611023528644815920,
        4951685751389022873,
        412187076578488171,
        1585983186840150884,
        7807665466484382705,
        712305145581244918,
        4322244846091153304,
        6234640337691483064,
        9153777092281250720,
        523670692364721360,
        2330902430847333813,
        409875993521174918,
        2121323840214436209,
        5466381577735248675,
        815168190906812795,
        2749473206948472890,
        7474098058608218632,
        3845128204733664449,
        2543043228596044102,
        3627451871426195666,
        7091926438964367865,
        4098397891197996670,
        7540590664258056166,
        2756240225789440811,
        4329915501778702124,
        6602730247286959808,
        1202665210165536719,
        8781363802291535860,
        8264321986055990372,
        8768358876530945217,
        2021468524662347718,
        2605547570834208195,
        5805781041064105660,
        296033943512337982,
        3085999487186248196,
        8349471701046037910,
        3001458230528406705,
        4725384019926866028,
        1247143435413610629,
        422577906196283034,
        1854643569630323574,
        2125839610263831124,
        1810765990879581254,
        3815558512558166297,
        8006864188754517374,
        1250498418988874444,
        6574242313233925588,
        7918994090413164402,
        4532759703731389759,
        6928509645694928297,
        1884835690140509563,
        6610389663291859082,
        7934275214333387146,
        1731032628070905690,
        7068085875375336550
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    General: EntityDefinition<General>(
        model: _entities[0],
        toOneRelations: (General object) => [],
        toManyRelations: (General object) => {},
        getId: (General object) => object.id,
        setId: (General object, int id) {
          object.id = id;
        },
        objectToFB: (General object, fb.Builder fbb) {
          final enrolmentIdOffset = fbb.writeString(object.enrolmentId);
          final alt_file_idOffset = fbb.writeString(object.alt_file_id);
          final chba_nz_fileOffset = fbb.writeString(object.chba_nz_file);
          final perspectiveOffset = fbb.writeString(object.perspective);
          final soNameOffset = fbb.writeString(object.soName);
          final hddZoneOffset = fbb.writeString(object.hddZone);
          final builderNameOffset = fbb.writeString(object.builderName);
          final evaluatorNameOffset = fbb.writeString(object.evaluatorName);
          final fieldTechnicianOffset = fbb.writeString(object.fieldTechnician);
          final inspectionDateOffset = fbb.writeString(object.inspectionDate);
          final siteContactNameOffset = fbb.writeString(object.siteContactName);
          final siteContactNumberOffset =
              fbb.writeString(object.siteContactNumber);
          final siteContactEmailOffset =
              fbb.writeString(object.siteContactEmail);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, enrolmentIdOffset);
          fbb.addOffset(2, alt_file_idOffset);
          fbb.addOffset(3, chba_nz_fileOffset);
          fbb.addOffset(4, perspectiveOffset);
          fbb.addOffset(5, soNameOffset);
          fbb.addOffset(6, hddZoneOffset);
          fbb.addOffset(7, builderNameOffset);
          fbb.addInt64(8, object.builderId);
          fbb.addOffset(9, evaluatorNameOffset);
          fbb.addInt64(10, object.evaluatorId);
          fbb.addOffset(11, fieldTechnicianOffset);
          fbb.addOffset(12, inspectionDateOffset);
          fbb.addOffset(13, siteContactNameOffset);
          fbb.addOffset(14, siteContactNumberOffset);
          fbb.addOffset(15, siteContactEmailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = General()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..enrolmentId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..alt_file_id = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..chba_nz_file = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..perspective = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..soName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..hddZone = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..builderName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..builderId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20)
            ..evaluatorName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..evaluatorId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24)
            ..fieldTechnician = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..inspectionDate = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..siteContactName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..siteContactNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 32, '')
            ..siteContactEmail = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '');

          return object;
        }),
    CompleteForm: EntityDefinition<CompleteForm>(
        model: _entities[1],
        toOneRelations: (CompleteForm object) => [
              object.general,
              object.house,
              object.buildComponentOne,
              object.buildComponentTwo,
              object.buildComponentThree
            ],
        toManyRelations: (CompleteForm object) => {},
        getId: (CompleteForm object) => object.id,
        setId: (CompleteForm object, int id) {
          object.id = id;
        },
        objectToFB: (CompleteForm object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.general.targetId);
          fbb.addInt64(2, object.house.targetId);
          fbb.addInt64(3, object.buildComponentOne.targetId);
          fbb.addInt64(4, object.buildComponentTwo.targetId);
          fbb.addInt64(5, object.buildComponentThree.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CompleteForm()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.general.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.general.attach(store);
          object.house.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.house.attach(store);
          object.buildComponentOne.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.buildComponentOne.attach(store);
          object.buildComponentTwo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.buildComponentTwo.attach(store);
          object.buildComponentThree.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.buildComponentThree.attach(store);
          return object;
        }),
    BuildComponentOne: EntityDefinition<BuildComponentOne>(
        model: _entities[2],
        toOneRelations: (BuildComponentOne object) => [],
        toManyRelations: (BuildComponentOne object) => {},
        getId: (BuildComponentOne object) => object.id,
        setId: (BuildComponentOne object, int id) {
          object.id = id;
        },
        objectToFB: (BuildComponentOne object, fb.Builder fbb) {
          final commentsOffset = fbb.writeString(object.comments);
          final wagBOPDescriptionOffset =
              fbb.writeString(object.wagBOPDescription);
          final wagBOPCreditOffset = fbb.writeString(object.wagBOPCredit);
          final wagVerificationOffset = fbb.writeString(object.wagVerification);
          final cfrBOPDescriptionOffset =
              fbb.writeString(object.cfrBOPDescription);
          final cfrBOPCreditOffset = fbb.writeString(object.cfrBOPCredit);
          final cfrVerificationOffset = fbb.writeString(object.cfrVerification);
          final cbaBOPDescriptionOffset =
              fbb.writeString(object.cbaBOPDescription);
          final cbaBOPCreditOffset = fbb.writeString(object.cbaBOPCredit);
          final cbaVerificationOffset = fbb.writeString(object.cbaVerification);
          final efBOPDescriptionOffset =
              fbb.writeString(object.efBOPDescription);
          final efBOPCreditOffset = fbb.writeString(object.efBOPCredit);
          final efVerificationOffset = fbb.writeString(object.efVerification);
          final fwBOPDescriptionOffset =
              fbb.writeString(object.fwBOPDescription);
          final fwBOPCreditOffset = fbb.writeString(object.fwBOPCredit);
          final fwVerificationOffset = fbb.writeString(object.fwVerification);
          final fwImageOffset = fbb.writeString(object.fwImage);
          final uhbBOPDescriptionOffset =
              fbb.writeString(object.uhbBOPDescription);
          final uhbBOPCreditOffset = fbb.writeString(object.uhbBOPCredit);
          final uhbVerificationOffset = fbb.writeString(object.uhbVerification);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addOffset(7, commentsOffset);
          fbb.addOffset(8, wagBOPDescriptionOffset);
          fbb.addOffset(9, wagBOPCreditOffset);
          fbb.addOffset(10, wagVerificationOffset);
          fbb.addOffset(11, cfrBOPDescriptionOffset);
          fbb.addOffset(12, cfrBOPCreditOffset);
          fbb.addOffset(13, cfrVerificationOffset);
          fbb.addOffset(14, cbaBOPDescriptionOffset);
          fbb.addOffset(15, cbaBOPCreditOffset);
          fbb.addOffset(16, cbaVerificationOffset);
          fbb.addOffset(17, efBOPDescriptionOffset);
          fbb.addOffset(18, efBOPCreditOffset);
          fbb.addOffset(19, efVerificationOffset);
          fbb.addOffset(20, fwBOPDescriptionOffset);
          fbb.addOffset(21, fwBOPCreditOffset);
          fbb.addOffset(22, fwVerificationOffset);
          fbb.addOffset(23, fwImageOffset);
          fbb.addOffset(24, uhbBOPDescriptionOffset);
          fbb.addOffset(25, uhbBOPCreditOffset);
          fbb.addOffset(26, uhbVerificationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BuildComponentOne()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..wagBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..wagBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..wagVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..cfrBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..cfrBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..cfrVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..cbaBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 32, '')
            ..cbaBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '')
            ..cbaVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 36, '')
            ..efBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '')
            ..efBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '')
            ..efVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 42, '')
            ..fwBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 44, '')
            ..fwBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 46, '')
            ..fwVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 48, '')
            ..fwImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 50, '')
            ..uhbBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 52, '')
            ..uhbBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 54, '')
            ..uhbVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 56, '');

          return object;
        }),
    BuildComponentThree: EntityDefinition<BuildComponentThree>(
        model: _entities[3],
        toOneRelations: (BuildComponentThree object) => [],
        toManyRelations: (BuildComponentThree object) => {},
        getId: (BuildComponentThree object) => object.id,
        setId: (BuildComponentThree object, int id) {
          object.id = id;
        },
        objectToFB: (BuildComponentThree object, fb.Builder fbb) {
          final commentsOffset = fbb.writeString(object.comments);
          final airTightnessBOPDescriptionOffset =
              fbb.writeString(object.airTightnessBOPDescription);
          final airTightnessVerificationOffset =
              fbb.writeString(object.airTightnessVerification);
          final airTightnessCreditOffset =
              fbb.writeString(object.airTightnessCredit);
          final airTightnessACHOffset = fbb.writeString(object.airTightnessACH);
          final airTightnessNLROffset = fbb.writeString(object.airTightnessNLR);
          final airTightnessEQLAOffset =
              fbb.writeString(object.airTightnessEQLA);
          final drainWaterBOPDescriptionOffset =
              fbb.writeString(object.drainWaterBOPDescription);
          final drainWaterVerificationOffset =
              fbb.writeString(object.drainWaterVerification);
          final drainWaterCreditOffset =
              fbb.writeString(object.drainWaterCredit);
          final drainWaterMakeOffset = fbb.writeString(object.drainWaterMake);
          final drainWaterModelOffset = fbb.writeString(object.drainWaterModel);
          final drainWaterImageOffset = fbb.writeString(object.drainWaterImage);
          final spaceCoolingBOPDescriptionOffset =
              fbb.writeString(object.spaceCoolingBOPDescription);
          final spaceCoolingVerificationOffset =
              fbb.writeString(object.spaceCoolingVerification);
          final spaceCoolingCreditOffset =
              fbb.writeString(object.spaceCoolingCredit);
          final spaceCoolingMakeOffset =
              fbb.writeString(object.spaceCoolingMake);
          final spaceCoolingModelOffset =
              fbb.writeString(object.spaceCoolingModel);
          final spaceCoolingImageOffset =
              fbb.writeString(object.spaceCoolingImage);
          final spaceHeatingBOPDescriptionOffset =
              fbb.writeString(object.spaceHeatingBOPDescription);
          final spaceHeatingVerificationOffset =
              fbb.writeString(object.spaceHeatingVerification);
          final spaceHeatingCreditOffset =
              fbb.writeString(object.spaceHeatingCredit);
          final spaceHeatingMakeOffset =
              fbb.writeString(object.spaceHeatingMake);
          final spaceHeatingModelOffset =
              fbb.writeString(object.spaceHeatingModel);
          final spaceHeatingImageOffset =
              fbb.writeString(object.spaceHeatingImage);
          final ductSealingRequiredOffset =
              fbb.writeString(object.ductSealingRequired);
          final ductSealingVerificationOffset =
              fbb.writeString(object.ductSealingVerification);
          final domesticHotWaterBOPDescriptionOffset =
              fbb.writeString(object.domesticHotWaterBOPDescription);
          final domesticHotWaterVerificationOffset =
              fbb.writeString(object.domesticHotWaterVerification);
          final domesticHotWaterCreditOffset =
              fbb.writeString(object.domesticHotWaterCredit);
          final domesticHotWaterMakeOffset =
              fbb.writeString(object.domesticHotWaterMake);
          final domesticHotWaterModelOffset =
              fbb.writeString(object.domesticHotWaterModel);
          final domesticHotWaterImageOffset =
              fbb.writeString(object.domesticHotWaterImage);
          final ventilationBOPDescriptionOffset =
              fbb.writeString(object.ventilationBOPDescription);
          final ventilationVerificationOffset =
              fbb.writeString(object.ventilationVerification);
          final ventilationCreditOffset =
              fbb.writeString(object.ventilationCredit);
          final ventilationMakeOffset = fbb.writeString(object.ventilationMake);
          final ventilationModelOffset =
              fbb.writeString(object.ventilationModel);
          final ventilationImageOffset =
              fbb.writeString(object.ventilationImage);
          final ventilationFreshOffset =
              fbb.writeString(object.ventilationFresh);
          final ventilationStaleOffset =
              fbb.writeString(object.ventilationStale);
          final furnaceFanOffset = fbb.writeString(object.furnaceFan);
          final hrvBalancedOffset = fbb.writeString(object.hrvBalanced);
          fbb.startTable(53);
          fbb.addInt64(0, object.id);
          fbb.addOffset(8, commentsOffset);
          fbb.addOffset(9, airTightnessBOPDescriptionOffset);
          fbb.addOffset(10, airTightnessVerificationOffset);
          fbb.addOffset(11, airTightnessCreditOffset);
          fbb.addOffset(12, airTightnessACHOffset);
          fbb.addOffset(13, airTightnessNLROffset);
          fbb.addOffset(14, airTightnessEQLAOffset);
          fbb.addOffset(15, drainWaterBOPDescriptionOffset);
          fbb.addOffset(16, drainWaterVerificationOffset);
          fbb.addOffset(17, drainWaterCreditOffset);
          fbb.addOffset(18, drainWaterMakeOffset);
          fbb.addOffset(19, drainWaterModelOffset);
          fbb.addOffset(20, drainWaterImageOffset);
          fbb.addOffset(21, spaceCoolingBOPDescriptionOffset);
          fbb.addOffset(22, spaceCoolingVerificationOffset);
          fbb.addOffset(23, spaceCoolingCreditOffset);
          fbb.addOffset(24, spaceCoolingMakeOffset);
          fbb.addOffset(25, spaceCoolingModelOffset);
          fbb.addOffset(26, spaceCoolingImageOffset);
          fbb.addOffset(27, spaceHeatingBOPDescriptionOffset);
          fbb.addOffset(28, spaceHeatingVerificationOffset);
          fbb.addOffset(29, spaceHeatingCreditOffset);
          fbb.addOffset(30, spaceHeatingMakeOffset);
          fbb.addOffset(31, spaceHeatingModelOffset);
          fbb.addOffset(32, spaceHeatingImageOffset);
          fbb.addOffset(33, ductSealingRequiredOffset);
          fbb.addOffset(34, ductSealingVerificationOffset);
          fbb.addOffset(35, domesticHotWaterBOPDescriptionOffset);
          fbb.addOffset(36, domesticHotWaterVerificationOffset);
          fbb.addOffset(37, domesticHotWaterCreditOffset);
          fbb.addOffset(38, domesticHotWaterMakeOffset);
          fbb.addOffset(39, domesticHotWaterModelOffset);
          fbb.addOffset(40, domesticHotWaterImageOffset);
          fbb.addOffset(41, ventilationBOPDescriptionOffset);
          fbb.addOffset(42, ventilationVerificationOffset);
          fbb.addOffset(43, ventilationCreditOffset);
          fbb.addOffset(44, ventilationMakeOffset);
          fbb.addOffset(45, ventilationModelOffset);
          fbb.addOffset(46, ventilationImageOffset);
          fbb.addOffset(47, ventilationFreshOffset);
          fbb.addOffset(48, ventilationStaleOffset);
          fbb.addInt64(49, object.bedroomCount);
          fbb.addOffset(50, furnaceFanOffset);
          fbb.addOffset(51, hrvBalancedOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BuildComponentThree()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..airTightnessBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 22, '')
            ..airTightnessVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 24, '')
            ..airTightnessCredit =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 26, '')
            ..airTightnessACH = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..airTightnessNLR = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..airTightnessEQLA = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 32, '')
            ..drainWaterBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 34, '')
            ..drainWaterVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 36, '')
            ..drainWaterCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '')
            ..drainWaterMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '')
            ..drainWaterModel = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 42, '')
            ..drainWaterImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 44, '')
            ..spaceCoolingBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 46, '')
            ..spaceCoolingVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 48, '')
            ..spaceCoolingCredit =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 50, '')
            ..spaceCoolingMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 52, '')
            ..spaceCoolingModel = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 54, '')
            ..spaceCoolingImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 56, '')
            ..spaceHeatingBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 58, '')
            ..spaceHeatingVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 60, '')
            ..spaceHeatingCredit =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 62, '')
            ..spaceHeatingMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 64, '')
            ..spaceHeatingModel = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 66, '')
            ..spaceHeatingImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 68, '')
            ..ductSealingRequired =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 70, '')
            ..ductSealingVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 72, '')
            ..domesticHotWaterBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 74, '')
            ..domesticHotWaterVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 76, '')
            ..domesticHotWaterCredit =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 78, '')
            ..domesticHotWaterMake =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 80, '')
            ..domesticHotWaterModel =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 82, '')
            ..domesticHotWaterImage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 84, '')
            ..ventilationBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 86, '')
            ..ventilationVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 88, '')
            ..ventilationCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 90, '')
            ..ventilationMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 92, '')
            ..ventilationModel = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 94, '')
            ..ventilationImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 96, '')
            ..ventilationFresh = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 98, '')
            ..ventilationStale = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 100, '')
            ..bedroomCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0)
            ..furnaceFan = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 104, '')
            ..hrvBalanced = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 106, '');

          return object;
        }),
    BuildComponentTwo: EntityDefinition<BuildComponentTwo>(
        model: _entities[4],
        toOneRelations: (BuildComponentTwo object) => [],
        toManyRelations: (BuildComponentTwo object) => {},
        getId: (BuildComponentTwo object) => object.id,
        setId: (BuildComponentTwo object, int id) {
          object.id = id;
        },
        objectToFB: (BuildComponentTwo object, fb.Builder fbb) {
          final commentsOffset = fbb.writeString(object.comments);
          final insulatedDoorRequiredOffset =
              fbb.writeString(object.insulatedDoorRequired);
          final insulatedDoorVerificationOffset =
              fbb.writeString(object.insulatedDoorVerification);
          final cellarDoorRequiredOffset =
              fbb.writeString(object.cellarDoorRequired);
          final cellarDoorVerificationOffset =
              fbb.writeString(object.cellarDoorVerification);
          final fireplaceBOPDescriptionOffset =
              fbb.writeString(object.fireplaceBOPDescription);
          final fireplaceVerificationOffset =
              fbb.writeString(object.fireplaceVerification);
          final fireplaceCreditOffset = fbb.writeString(object.fireplaceCredit);
          final fireplaceMakeOffset = fbb.writeString(object.fireplaceMake);
          final fireplaceModelOffset = fbb.writeString(object.fireplaceModel);
          final fireplaceImageOffset = fbb.writeString(object.fireplaceImage);
          final triplesBOPDescriptionOffset =
              fbb.writeString(object.triplesBOPDescription);
          final triplesVerificationOffset =
              fbb.writeString(object.triplesVerification);
          final esBOPDescriptionOffset =
              fbb.writeString(object.esBOPDescription);
          final esBOPCreditOffset = fbb.writeString(object.esBOPCredit);
          final esVerificationOffset = fbb.writeString(object.esVerification);
          final energyMonitorRequiredOffset =
              fbb.writeString(object.energyMonitorRequired);
          final energyMonitorVerificationOffset =
              fbb.writeString(object.energyMonitorVerification);
          final solarPVRequiredOffset = fbb.writeString(object.solarPVRequired);
          final solarPVVerificationOffset =
              fbb.writeString(object.solarPVVerification);
          final windowBOPDescriptionOffset =
              fbb.writeString(object.windowBOPDescription);
          final windowBOPCreditOffset = fbb.writeString(object.windowBOPCredit);
          final windowVerificationOffset =
              fbb.writeString(object.windowVerification);
          final windowImageOffset = fbb.writeString(object.windowImage);
          final windowMakeOffset = fbb.writeString(object.windowMake);
          fbb.startTable(35);
          fbb.addInt64(0, object.id);
          fbb.addOffset(9, commentsOffset);
          fbb.addOffset(10, insulatedDoorRequiredOffset);
          fbb.addOffset(11, insulatedDoorVerificationOffset);
          fbb.addOffset(12, cellarDoorRequiredOffset);
          fbb.addOffset(13, cellarDoorVerificationOffset);
          fbb.addOffset(14, fireplaceBOPDescriptionOffset);
          fbb.addOffset(15, fireplaceVerificationOffset);
          fbb.addOffset(16, fireplaceCreditOffset);
          fbb.addOffset(17, fireplaceMakeOffset);
          fbb.addOffset(18, fireplaceModelOffset);
          fbb.addOffset(19, fireplaceImageOffset);
          fbb.addOffset(20, triplesBOPDescriptionOffset);
          fbb.addOffset(21, triplesVerificationOffset);
          fbb.addOffset(22, esBOPDescriptionOffset);
          fbb.addOffset(23, esBOPCreditOffset);
          fbb.addOffset(24, esVerificationOffset);
          fbb.addOffset(25, energyMonitorRequiredOffset);
          fbb.addOffset(26, energyMonitorVerificationOffset);
          fbb.addOffset(27, solarPVRequiredOffset);
          fbb.addOffset(28, solarPVVerificationOffset);
          fbb.addOffset(29, windowBOPDescriptionOffset);
          fbb.addOffset(30, windowBOPCreditOffset);
          fbb.addOffset(31, windowVerificationOffset);
          fbb.addOffset(32, windowImageOffset);
          fbb.addOffset(33, windowMakeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BuildComponentTwo()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..insulatedDoorRequired =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 24, '')
            ..insulatedDoorVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 26, '')
            ..cellarDoorRequired =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 28, '')
            ..cellarDoorVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 30, '')
            ..fireplaceBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 32, '')
            ..fireplaceVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 34, '')
            ..fireplaceCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 36, '')
            ..fireplaceMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '')
            ..fireplaceModel = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '')
            ..fireplaceImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 42, '')
            ..triplesBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 44, '')
            ..triplesVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 46, '')
            ..esBOPDescription = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 48, '')
            ..esBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 50, '')
            ..esVerification = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 52, '')
            ..energyMonitorRequired =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 54, '')
            ..energyMonitorVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 56, '')
            ..solarPVRequired = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 58, '')
            ..solarPVVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 60, '')
            ..windowBOPDescription =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 62, '')
            ..windowBOPCredit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 64, '')
            ..windowVerification =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 66, '')
            ..windowImage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 68, '')
            ..windowMake = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 70, '');

          return object;
        }),
    House: EntityDefinition<House>(
        model: _entities[5],
        toOneRelations: (House object) => [],
        toManyRelations: (House object) => {},
        getId: (House object) => object.id,
        setId: (House object, int id) {
          object.id = id;
        },
        objectToFB: (House object, fb.Builder fbb) {
          final siteOffset = fbb.writeString(object.site);
          final addressOffset = fbb.writeString(object.address);
          final cityOffset = fbb.writeString(object.city);
          final postalCodeOffset = fbb.writeString(object.postalCode);
          final provinceOffset = fbb.writeString(object.province);
          final att_det_murbOffset = fbb.writeString(object.att_det_murb);
          final mid_end_Offset = fbb.writeString(object.mid_end_);
          final directionOffset = fbb.writeString(object.direction);
          final specialConditionOffset =
              fbb.writeString(object.specialCondition);
          final modelNameOffset = fbb.writeString(object.modelName);
          final commentsOffset = fbb.writeString(object.comments);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, siteOffset);
          fbb.addInt64(2, object.phase);
          fbb.addInt64(3, object.lot);
          fbb.addOffset(4, addressOffset);
          fbb.addOffset(5, cityOffset);
          fbb.addOffset(6, postalCodeOffset);
          fbb.addOffset(7, provinceOffset);
          fbb.addOffset(8, att_det_murbOffset);
          fbb.addOffset(9, mid_end_Offset);
          fbb.addOffset(10, directionOffset);
          fbb.addOffset(11, specialConditionOffset);
          fbb.addOffset(12, modelNameOffset);
          fbb.addFloat64(13, object.volume);
          fbb.addFloat64(14, object.surfaceArea);
          fbb.addOffset(15, commentsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = House()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..site = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..phase =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..lot =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..city = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..postalCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..province = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..att_det_murb = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..mid_end_ = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..direction = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..specialCondition = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..modelName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..volume = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 30)
            ..surfaceArea = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 32)
            ..comments = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '');

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [General] entity fields to define ObjectBox queries.
class General_ {
  /// see [General.id]
  static final id = QueryIntegerProperty<General>(_entities[0].properties[0]);

  /// see [General.enrolmentId]
  static final enrolmentId =
      QueryStringProperty<General>(_entities[0].properties[1]);

  /// see [General.alt_file_id]
  static final alt_file_id =
      QueryStringProperty<General>(_entities[0].properties[2]);

  /// see [General.chba_nz_file]
  static final chba_nz_file =
      QueryStringProperty<General>(_entities[0].properties[3]);

  /// see [General.perspective]
  static final perspective =
      QueryStringProperty<General>(_entities[0].properties[4]);

  /// see [General.soName]
  static final soName =
      QueryStringProperty<General>(_entities[0].properties[5]);

  /// see [General.hddZone]
  static final hddZone =
      QueryStringProperty<General>(_entities[0].properties[6]);

  /// see [General.builderName]
  static final builderName =
      QueryStringProperty<General>(_entities[0].properties[7]);

  /// see [General.builderId]
  static final builderId =
      QueryIntegerProperty<General>(_entities[0].properties[8]);

  /// see [General.evaluatorName]
  static final evaluatorName =
      QueryStringProperty<General>(_entities[0].properties[9]);

  /// see [General.evaluatorId]
  static final evaluatorId =
      QueryIntegerProperty<General>(_entities[0].properties[10]);

  /// see [General.fieldTechnician]
  static final fieldTechnician =
      QueryStringProperty<General>(_entities[0].properties[11]);

  /// see [General.inspectionDate]
  static final inspectionDate =
      QueryStringProperty<General>(_entities[0].properties[12]);

  /// see [General.siteContactName]
  static final siteContactName =
      QueryStringProperty<General>(_entities[0].properties[13]);

  /// see [General.siteContactNumber]
  static final siteContactNumber =
      QueryStringProperty<General>(_entities[0].properties[14]);

  /// see [General.siteContactEmail]
  static final siteContactEmail =
      QueryStringProperty<General>(_entities[0].properties[15]);
}

/// [CompleteForm] entity fields to define ObjectBox queries.
class CompleteForm_ {
  /// see [CompleteForm.id]
  static final id =
      QueryIntegerProperty<CompleteForm>(_entities[1].properties[0]);

  /// see [CompleteForm.general]
  static final general =
      QueryRelationToOne<CompleteForm, General>(_entities[1].properties[1]);

  /// see [CompleteForm.house]
  static final house =
      QueryRelationToOne<CompleteForm, House>(_entities[1].properties[2]);

  /// see [CompleteForm.buildComponentOne]
  static final buildComponentOne =
      QueryRelationToOne<CompleteForm, BuildComponentOne>(
          _entities[1].properties[3]);

  /// see [CompleteForm.buildComponentTwo]
  static final buildComponentTwo =
      QueryRelationToOne<CompleteForm, BuildComponentTwo>(
          _entities[1].properties[4]);

  /// see [CompleteForm.buildComponentThree]
  static final buildComponentThree =
      QueryRelationToOne<CompleteForm, BuildComponentThree>(
          _entities[1].properties[5]);
}

/// [BuildComponentOne] entity fields to define ObjectBox queries.
class BuildComponentOne_ {
  /// see [BuildComponentOne.id]
  static final id =
      QueryIntegerProperty<BuildComponentOne>(_entities[2].properties[0]);

  /// see [BuildComponentOne.comments]
  static final comments =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[1]);

  /// see [BuildComponentOne.wagBOPDescription]
  static final wagBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[2]);

  /// see [BuildComponentOne.wagBOPCredit]
  static final wagBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[3]);

  /// see [BuildComponentOne.wagVerification]
  static final wagVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[4]);

  /// see [BuildComponentOne.cfrBOPDescription]
  static final cfrBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[5]);

  /// see [BuildComponentOne.cfrBOPCredit]
  static final cfrBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[6]);

  /// see [BuildComponentOne.cfrVerification]
  static final cfrVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[7]);

  /// see [BuildComponentOne.cbaBOPDescription]
  static final cbaBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[8]);

  /// see [BuildComponentOne.cbaBOPCredit]
  static final cbaBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[9]);

  /// see [BuildComponentOne.cbaVerification]
  static final cbaVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[10]);

  /// see [BuildComponentOne.efBOPDescription]
  static final efBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[11]);

  /// see [BuildComponentOne.efBOPCredit]
  static final efBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[12]);

  /// see [BuildComponentOne.efVerification]
  static final efVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[13]);

  /// see [BuildComponentOne.fwBOPDescription]
  static final fwBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[14]);

  /// see [BuildComponentOne.fwBOPCredit]
  static final fwBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[15]);

  /// see [BuildComponentOne.fwVerification]
  static final fwVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[16]);

  /// see [BuildComponentOne.fwImage]
  static final fwImage =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[17]);

  /// see [BuildComponentOne.uhbBOPDescription]
  static final uhbBOPDescription =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[18]);

  /// see [BuildComponentOne.uhbBOPCredit]
  static final uhbBOPCredit =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[19]);

  /// see [BuildComponentOne.uhbVerification]
  static final uhbVerification =
      QueryStringProperty<BuildComponentOne>(_entities[2].properties[20]);
}

/// [BuildComponentThree] entity fields to define ObjectBox queries.
class BuildComponentThree_ {
  /// see [BuildComponentThree.id]
  static final id =
      QueryIntegerProperty<BuildComponentThree>(_entities[3].properties[0]);

  /// see [BuildComponentThree.comments]
  static final comments =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[1]);

  /// see [BuildComponentThree.airTightnessBOPDescription]
  static final airTightnessBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[2]);

  /// see [BuildComponentThree.airTightnessVerification]
  static final airTightnessVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[3]);

  /// see [BuildComponentThree.airTightnessCredit]
  static final airTightnessCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[4]);

  /// see [BuildComponentThree.airTightnessACH]
  static final airTightnessACH =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[5]);

  /// see [BuildComponentThree.airTightnessNLR]
  static final airTightnessNLR =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[6]);

  /// see [BuildComponentThree.airTightnessEQLA]
  static final airTightnessEQLA =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[7]);

  /// see [BuildComponentThree.drainWaterBOPDescription]
  static final drainWaterBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[8]);

  /// see [BuildComponentThree.drainWaterVerification]
  static final drainWaterVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[9]);

  /// see [BuildComponentThree.drainWaterCredit]
  static final drainWaterCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[10]);

  /// see [BuildComponentThree.drainWaterMake]
  static final drainWaterMake =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[11]);

  /// see [BuildComponentThree.drainWaterModel]
  static final drainWaterModel =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[12]);

  /// see [BuildComponentThree.drainWaterImage]
  static final drainWaterImage =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[13]);

  /// see [BuildComponentThree.spaceCoolingBOPDescription]
  static final spaceCoolingBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[14]);

  /// see [BuildComponentThree.spaceCoolingVerification]
  static final spaceCoolingVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[15]);

  /// see [BuildComponentThree.spaceCoolingCredit]
  static final spaceCoolingCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[16]);

  /// see [BuildComponentThree.spaceCoolingMake]
  static final spaceCoolingMake =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[17]);

  /// see [BuildComponentThree.spaceCoolingModel]
  static final spaceCoolingModel =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[18]);

  /// see [BuildComponentThree.spaceCoolingImage]
  static final spaceCoolingImage =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[19]);

  /// see [BuildComponentThree.spaceHeatingBOPDescription]
  static final spaceHeatingBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[20]);

  /// see [BuildComponentThree.spaceHeatingVerification]
  static final spaceHeatingVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[21]);

  /// see [BuildComponentThree.spaceHeatingCredit]
  static final spaceHeatingCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[22]);

  /// see [BuildComponentThree.spaceHeatingMake]
  static final spaceHeatingMake =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[23]);

  /// see [BuildComponentThree.spaceHeatingModel]
  static final spaceHeatingModel =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[24]);

  /// see [BuildComponentThree.spaceHeatingImage]
  static final spaceHeatingImage =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[25]);

  /// see [BuildComponentThree.ductSealingRequired]
  static final ductSealingRequired =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[26]);

  /// see [BuildComponentThree.ductSealingVerification]
  static final ductSealingVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[27]);

  /// see [BuildComponentThree.domesticHotWaterBOPDescription]
  static final domesticHotWaterBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[28]);

  /// see [BuildComponentThree.domesticHotWaterVerification]
  static final domesticHotWaterVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[29]);

  /// see [BuildComponentThree.domesticHotWaterCredit]
  static final domesticHotWaterCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[30]);

  /// see [BuildComponentThree.domesticHotWaterMake]
  static final domesticHotWaterMake =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[31]);

  /// see [BuildComponentThree.domesticHotWaterModel]
  static final domesticHotWaterModel =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[32]);

  /// see [BuildComponentThree.domesticHotWaterImage]
  static final domesticHotWaterImage =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[33]);

  /// see [BuildComponentThree.ventilationBOPDescription]
  static final ventilationBOPDescription =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[34]);

  /// see [BuildComponentThree.ventilationVerification]
  static final ventilationVerification =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[35]);

  /// see [BuildComponentThree.ventilationCredit]
  static final ventilationCredit =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[36]);

  /// see [BuildComponentThree.ventilationMake]
  static final ventilationMake =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[37]);

  /// see [BuildComponentThree.ventilationModel]
  static final ventilationModel =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[38]);

  /// see [BuildComponentThree.ventilationImage]
  static final ventilationImage =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[39]);

  /// see [BuildComponentThree.ventilationFresh]
  static final ventilationFresh =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[40]);

  /// see [BuildComponentThree.ventilationStale]
  static final ventilationStale =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[41]);

  /// see [BuildComponentThree.bedroomCount]
  static final bedroomCount =
      QueryIntegerProperty<BuildComponentThree>(_entities[3].properties[42]);

  /// see [BuildComponentThree.furnaceFan]
  static final furnaceFan =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[43]);

  /// see [BuildComponentThree.hrvBalanced]
  static final hrvBalanced =
      QueryStringProperty<BuildComponentThree>(_entities[3].properties[44]);
}

/// [BuildComponentTwo] entity fields to define ObjectBox queries.
class BuildComponentTwo_ {
  /// see [BuildComponentTwo.id]
  static final id =
      QueryIntegerProperty<BuildComponentTwo>(_entities[4].properties[0]);

  /// see [BuildComponentTwo.comments]
  static final comments =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[1]);

  /// see [BuildComponentTwo.insulatedDoorRequired]
  static final insulatedDoorRequired =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[2]);

  /// see [BuildComponentTwo.insulatedDoorVerification]
  static final insulatedDoorVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[3]);

  /// see [BuildComponentTwo.cellarDoorRequired]
  static final cellarDoorRequired =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[4]);

  /// see [BuildComponentTwo.cellarDoorVerification]
  static final cellarDoorVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[5]);

  /// see [BuildComponentTwo.fireplaceBOPDescription]
  static final fireplaceBOPDescription =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[6]);

  /// see [BuildComponentTwo.fireplaceVerification]
  static final fireplaceVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[7]);

  /// see [BuildComponentTwo.fireplaceCredit]
  static final fireplaceCredit =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[8]);

  /// see [BuildComponentTwo.fireplaceMake]
  static final fireplaceMake =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[9]);

  /// see [BuildComponentTwo.fireplaceModel]
  static final fireplaceModel =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[10]);

  /// see [BuildComponentTwo.fireplaceImage]
  static final fireplaceImage =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[11]);

  /// see [BuildComponentTwo.triplesBOPDescription]
  static final triplesBOPDescription =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[12]);

  /// see [BuildComponentTwo.triplesVerification]
  static final triplesVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[13]);

  /// see [BuildComponentTwo.esBOPDescription]
  static final esBOPDescription =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[14]);

  /// see [BuildComponentTwo.esBOPCredit]
  static final esBOPCredit =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[15]);

  /// see [BuildComponentTwo.esVerification]
  static final esVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[16]);

  /// see [BuildComponentTwo.energyMonitorRequired]
  static final energyMonitorRequired =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[17]);

  /// see [BuildComponentTwo.energyMonitorVerification]
  static final energyMonitorVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[18]);

  /// see [BuildComponentTwo.solarPVRequired]
  static final solarPVRequired =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[19]);

  /// see [BuildComponentTwo.solarPVVerification]
  static final solarPVVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[20]);

  /// see [BuildComponentTwo.windowBOPDescription]
  static final windowBOPDescription =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[21]);

  /// see [BuildComponentTwo.windowBOPCredit]
  static final windowBOPCredit =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[22]);

  /// see [BuildComponentTwo.windowVerification]
  static final windowVerification =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[23]);

  /// see [BuildComponentTwo.windowImage]
  static final windowImage =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[24]);

  /// see [BuildComponentTwo.windowMake]
  static final windowMake =
      QueryStringProperty<BuildComponentTwo>(_entities[4].properties[25]);
}

/// [House] entity fields to define ObjectBox queries.
class House_ {
  /// see [House.id]
  static final id = QueryIntegerProperty<House>(_entities[5].properties[0]);

  /// see [House.site]
  static final site = QueryStringProperty<House>(_entities[5].properties[1]);

  /// see [House.phase]
  static final phase = QueryIntegerProperty<House>(_entities[5].properties[2]);

  /// see [House.lot]
  static final lot = QueryIntegerProperty<House>(_entities[5].properties[3]);

  /// see [House.address]
  static final address = QueryStringProperty<House>(_entities[5].properties[4]);

  /// see [House.city]
  static final city = QueryStringProperty<House>(_entities[5].properties[5]);

  /// see [House.postalCode]
  static final postalCode =
      QueryStringProperty<House>(_entities[5].properties[6]);

  /// see [House.province]
  static final province =
      QueryStringProperty<House>(_entities[5].properties[7]);

  /// see [House.att_det_murb]
  static final att_det_murb =
      QueryStringProperty<House>(_entities[5].properties[8]);

  /// see [House.mid_end_]
  static final mid_end_ =
      QueryStringProperty<House>(_entities[5].properties[9]);

  /// see [House.direction]
  static final direction =
      QueryStringProperty<House>(_entities[5].properties[10]);

  /// see [House.specialCondition]
  static final specialCondition =
      QueryStringProperty<House>(_entities[5].properties[11]);

  /// see [House.modelName]
  static final modelName =
      QueryStringProperty<House>(_entities[5].properties[12]);

  /// see [House.volume]
  static final volume = QueryDoubleProperty<House>(_entities[5].properties[13]);

  /// see [House.surfaceArea]
  static final surfaceArea =
      QueryDoubleProperty<House>(_entities[5].properties[14]);

  /// see [House.comments]
  static final comments =
      QueryStringProperty<House>(_entities[5].properties[15]);
}
